// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public static partial class TimeTrackerClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::TimeTracker.Api.Client.State.TimeTrackerClientStoreAccessor> AddTimeTrackerClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::TimeTracker.Api.Client.State.TimeTrackerClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TimeTracker.Api.Client.GetProjectsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TimeTracker.Api.Client.TimeTrackerClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TimeTracker.Api.Client.ITimeTrackerClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::TimeTracker.Api.Client.State.TimeTrackerClientStoreAccessor>("TimeTrackerClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("TimeTrackerClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::TimeTracker.Api.Client.State.ProjectEntity, global::TimeTracker.Api.Client.GetProjects_Projects_Nodes_Project>, global::TimeTracker.Api.Client.State.GetProjects_Projects_Nodes_ProjectFromProjectEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::TimeTracker.Api.Client.State.ProjectEmployeeEntity, global::TimeTracker.Api.Client.GetProjects_Projects_Nodes_ProjectEmployees_ProjectEmployee>, global::TimeTracker.Api.Client.State.GetProjects_Projects_Nodes_ProjectEmployees_ProjectEmployeeFromProjectEmployeeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::TimeTracker.Api.Client.State.EmployeeEntity, global::TimeTracker.Api.Client.GetProjects_Projects_Nodes_ProjectEmployees_Employee_Employee>, global::TimeTracker.Api.Client.State.GetProjects_Projects_Nodes_ProjectEmployees_Employee_EmployeeFromEmployeeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::TimeTracker.Api.Client.IGetProjectsResult>, global::TimeTracker.Api.Client.State.GetProjectsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::TimeTracker.Api.Client.IGetProjectsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TimeTracker.Api.Client.IGetProjectsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TimeTracker.Api.Client.IGetProjectsResult>, global::TimeTracker.Api.Client.State.GetProjectsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::TimeTracker.Api.Client.IGetProjectsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::TimeTracker.Api.Client.IGetProjectsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TimeTracker.Api.Client.IGetProjectsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TimeTracker.Api.Client.GetProjectsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TimeTracker.Api.Client.IGetProjectsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TimeTracker.Api.Client.GetProjectsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::TimeTracker.Api.Client.State.TimeTrackerClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TimeTracker.Api.Client.TimeTrackerClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::TimeTracker.Api.Client.ITimeTrackerClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::TimeTracker.Api.Client.TimeTrackerClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace TimeTracker.Api.Client
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public partial class GetProjectsResult : global::System.IEquatable<GetProjectsResult>, IGetProjectsResult
    {
        public GetProjectsResult(global::TimeTracker.Api.Client.IGetProjects_Projects? projects)
        {
            Projects = projects;
        }

        public global::TimeTracker.Api.Client.IGetProjects_Projects? Projects { get; }

        public virtual global::System.Boolean Equals(GetProjectsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Projects is null && other.Projects is null) || Projects != null && Projects.Equals(other.Projects)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjectsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Projects != null)
                {
                    hash ^= 397 * Projects.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public partial class GetProjects_Projects_ProjectsConnection : global::System.IEquatable<GetProjects_Projects_ProjectsConnection>, IGetProjects_Projects_ProjectsConnection
    {
        public GetProjects_Projects_ProjectsConnection(global::System.Collections.Generic.IReadOnlyList<global::TimeTracker.Api.Client.IGetProjects_Projects_Nodes>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TimeTracker.Api.Client.IGetProjects_Projects_Nodes>? Nodes { get; }

        public virtual global::System.Boolean Equals(GetProjects_Projects_ProjectsConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjects_Projects_ProjectsConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        hash ^= 397 * Nodes_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public partial class GetProjects_Projects_Nodes_Project : global::System.IEquatable<GetProjects_Projects_Nodes_Project>, IGetProjects_Projects_Nodes_Project
    {
        public GetProjects_Projects_Nodes_Project(global::System.Guid id, global::System.String name, global::System.Collections.Generic.IReadOnlyList<global::TimeTracker.Api.Client.IGetProjects_Projects_Nodes_ProjectEmployees> projectEmployees)
        {
            Id = id;
            Name = name;
            ProjectEmployees = projectEmployees;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::TimeTracker.Api.Client.IGetProjects_Projects_Nodes_ProjectEmployees> ProjectEmployees { get; }

        public virtual global::System.Boolean Equals(GetProjects_Projects_Nodes_Project? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ProjectEmployees, other.ProjectEmployees);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjects_Projects_Nodes_Project)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                foreach (var ProjectEmployees_elm in ProjectEmployees)
                {
                    hash ^= 397 * ProjectEmployees_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public partial class GetProjects_Projects_Nodes_ProjectEmployees_ProjectEmployee : global::System.IEquatable<GetProjects_Projects_Nodes_ProjectEmployees_ProjectEmployee>, IGetProjects_Projects_Nodes_ProjectEmployees_ProjectEmployee
    {
        public GetProjects_Projects_Nodes_ProjectEmployees_ProjectEmployee(global::TimeTracker.Api.Client.IGetProjects_Projects_Nodes_ProjectEmployees_Employee employee)
        {
            Employee = employee;
        }

        public global::TimeTracker.Api.Client.IGetProjects_Projects_Nodes_ProjectEmployees_Employee Employee { get; }

        public virtual global::System.Boolean Equals(GetProjects_Projects_Nodes_ProjectEmployees_ProjectEmployee? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Employee.Equals(other.Employee));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjects_Projects_Nodes_ProjectEmployees_ProjectEmployee)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Employee.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public partial class GetProjects_Projects_Nodes_ProjectEmployees_Employee_Employee : global::System.IEquatable<GetProjects_Projects_Nodes_ProjectEmployees_Employee_Employee>, IGetProjects_Projects_Nodes_ProjectEmployees_Employee_Employee
    {
        public GetProjects_Projects_Nodes_ProjectEmployees_Employee_Employee(global::System.String firstName)
        {
            FirstName = firstName;
        }

        public global::System.String FirstName { get; }

        public virtual global::System.Boolean Equals(GetProjects_Projects_Nodes_ProjectEmployees_Employee_Employee? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (FirstName.Equals(other.FirstName));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjects_Projects_Nodes_ProjectEmployees_Employee_Employee)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * FirstName.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public interface IGetProjectsResult
    {
        public global::TimeTracker.Api.Client.IGetProjects_Projects? Projects { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public interface IGetProjects_Projects
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::TimeTracker.Api.Client.IGetProjects_Projects_Nodes>? Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public interface IGetProjects_Projects_ProjectsConnection : IGetProjects_Projects
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public interface IGetProjects_Projects_Nodes
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::TimeTracker.Api.Client.IGetProjects_Projects_Nodes_ProjectEmployees> ProjectEmployees { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public interface IGetProjects_Projects_Nodes_Project : IGetProjects_Projects_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public interface IGetProjects_Projects_Nodes_ProjectEmployees
    {
        public global::TimeTracker.Api.Client.IGetProjects_Projects_Nodes_ProjectEmployees_Employee Employee { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public interface IGetProjects_Projects_Nodes_ProjectEmployees_ProjectEmployee : IGetProjects_Projects_Nodes_ProjectEmployees
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public interface IGetProjects_Projects_Nodes_ProjectEmployees_Employee
    {
        public global::System.String FirstName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public interface IGetProjects_Projects_Nodes_ProjectEmployees_Employee_Employee : IGetProjects_Projects_Nodes_ProjectEmployees_Employee
    {
    }

    /// <summary>
    /// Represents the operation service of the GetProjects GraphQL operation
    /// <code>
    /// query GetProjects {
    ///   projects {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       name
    ///       projectEmployees {
    ///         __typename
    ///         employee {
    ///           __typename
    ///           firstName
    ///           ... on Employee {
    ///             id
    ///           }
    ///         }
    ///         ... on ProjectEmployee {
    ///           id
    ///         }
    ///       }
    ///       ... on Project {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public partial class GetProjectsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetProjectsQueryDocument()
        {
        }

        public static GetProjectsQueryDocument Instance { get; } = new GetProjectsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "326dff7ef0e8d20259042302fac420cb");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetProjects GraphQL operation
    /// <code>
    /// query GetProjects {
    ///   projects {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       name
    ///       projectEmployees {
    ///         __typename
    ///         employee {
    ///           __typename
    ///           firstName
    ///           ... on Employee {
    ///             id
    ///           }
    ///         }
    ///         ... on ProjectEmployee {
    ///           id
    ///         }
    ///       }
    ///       ... on Project {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public partial class GetProjectsQuery : global::TimeTracker.Api.Client.IGetProjectsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetProjectsResult> _operationExecutor;
        public GetProjectsQuery(global::StrawberryShake.IOperationExecutor<IGetProjectsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetProjectsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetProjectsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetProjectsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetProjectsQueryDocument.Instance.Hash.Value, name: "GetProjects", document: GetProjectsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetProjects GraphQL operation
    /// <code>
    /// query GetProjects {
    ///   projects {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       name
    ///       projectEmployees {
    ///         __typename
    ///         employee {
    ///           __typename
    ///           firstName
    ///           ... on Employee {
    ///             id
    ///           }
    ///         }
    ///         ... on ProjectEmployee {
    ///           id
    ///         }
    ///       }
    ///       ... on Project {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public interface IGetProjectsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetProjectsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetProjectsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the TimeTrackerClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public partial class TimeTrackerClient : global::TimeTracker.Api.Client.ITimeTrackerClient
    {
        private readonly global::TimeTracker.Api.Client.IGetProjectsQuery _getProjects;
        public TimeTrackerClient(global::TimeTracker.Api.Client.IGetProjectsQuery getProjects)
        {
            _getProjects = getProjects ?? throw new global::System.ArgumentNullException(nameof(getProjects));
        }

        public static global::System.String ClientName => "TimeTrackerClient";
        public global::TimeTracker.Api.Client.IGetProjectsQuery GetProjects => _getProjects;
    }

    /// <summary>
    /// Represents the TimeTrackerClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public interface ITimeTrackerClient
    {
        global::TimeTracker.Api.Client.IGetProjectsQuery GetProjects { get; }
    }
}

namespace TimeTracker.Api.Client.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public partial class ProjectEntity
    {
        public ProjectEntity(global::System.Guid id = default !, global::System.String name = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> projectEmployees = default !)
        {
            Id = id;
            Name = name;
            ProjectEmployees = projectEmployees;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> ProjectEmployees { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public partial class ProjectEmployeeEntity
    {
        public ProjectEmployeeEntity(global::StrawberryShake.EntityId employee = default !)
        {
            Employee = employee;
        }

        public global::StrawberryShake.EntityId Employee { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public partial class EmployeeEntity
    {
        public EmployeeEntity(global::System.String firstName = default !)
        {
            FirstName = firstName;
        }

        public global::System.String FirstName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public partial class GetProjectsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::TimeTracker.Api.Client.GetProjectsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::TimeTracker.Api.Client.State.ProjectEntity, GetProjects_Projects_Nodes_Project> _getProjects_Projects_Nodes_ProjectFromProjectEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::TimeTracker.Api.Client.State.ProjectEmployeeEntity, GetProjects_Projects_Nodes_ProjectEmployees_ProjectEmployee> _getProjects_Projects_Nodes_ProjectEmployees_ProjectEmployeeFromProjectEmployeeEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::TimeTracker.Api.Client.State.EmployeeEntity, GetProjects_Projects_Nodes_ProjectEmployees_Employee_Employee> _getProjects_Projects_Nodes_ProjectEmployees_Employee_EmployeeFromEmployeeEntityMapper;
        public GetProjectsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::TimeTracker.Api.Client.State.ProjectEntity, GetProjects_Projects_Nodes_Project> getProjects_Projects_Nodes_ProjectFromProjectEntityMapper, global::StrawberryShake.IEntityMapper<global::TimeTracker.Api.Client.State.ProjectEmployeeEntity, GetProjects_Projects_Nodes_ProjectEmployees_ProjectEmployee> getProjects_Projects_Nodes_ProjectEmployees_ProjectEmployeeFromProjectEmployeeEntityMapper, global::StrawberryShake.IEntityMapper<global::TimeTracker.Api.Client.State.EmployeeEntity, GetProjects_Projects_Nodes_ProjectEmployees_Employee_Employee> getProjects_Projects_Nodes_ProjectEmployees_Employee_EmployeeFromEmployeeEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getProjects_Projects_Nodes_ProjectFromProjectEntityMapper = getProjects_Projects_Nodes_ProjectFromProjectEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getProjects_Projects_Nodes_ProjectFromProjectEntityMapper));
            _getProjects_Projects_Nodes_ProjectEmployees_ProjectEmployeeFromProjectEmployeeEntityMapper = getProjects_Projects_Nodes_ProjectEmployees_ProjectEmployeeFromProjectEmployeeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getProjects_Projects_Nodes_ProjectEmployees_ProjectEmployeeFromProjectEmployeeEntityMapper));
            _getProjects_Projects_Nodes_ProjectEmployees_Employee_EmployeeFromEmployeeEntityMapper = getProjects_Projects_Nodes_ProjectEmployees_Employee_EmployeeFromEmployeeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getProjects_Projects_Nodes_ProjectEmployees_Employee_EmployeeFromEmployeeEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::TimeTracker.Api.Client.IGetProjectsResult);
        public GetProjectsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetProjectsResultInfo info)
            {
                return new GetProjectsResult(MapIGetProjects_Projects(info.Projects, snapshot));
            }

            throw new global::System.ArgumentException("GetProjectsResultInfo expected.");
        }

        private global::TimeTracker.Api.Client.IGetProjects_Projects? MapIGetProjects_Projects(global::TimeTracker.Api.Client.State.ProjectsConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetProjects_Projects returnValue = default !;
            if (data?.__typename.Equals("ProjectsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetProjects_Projects_ProjectsConnection(MapIGetProjects_Projects_NodesNonNullableArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TimeTracker.Api.Client.IGetProjects_Projects_Nodes>? MapIGetProjects_Projects_NodesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var projects = new global::System.Collections.Generic.List<global::TimeTracker.Api.Client.IGetProjects_Projects_Nodes>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                projects.Add(MapNonNullableIGetProjects_Projects_Nodes(child, snapshot));
            }

            return projects;
        }

        private global::TimeTracker.Api.Client.IGetProjects_Projects_Nodes MapNonNullableIGetProjects_Projects_Nodes(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Project", global::System.StringComparison.Ordinal))
            {
                return _getProjects_Projects_Nodes_ProjectFromProjectEntityMapper.Map(snapshot.GetEntity<global::TimeTracker.Api.Client.State.ProjectEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TimeTracker.Api.Client.IGetProjects_Projects_Nodes_ProjectEmployees> MapNonNullableIGetProjects_Projects_Nodes_ProjectEmployeesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var projectEmployees = new global::System.Collections.Generic.List<global::TimeTracker.Api.Client.IGetProjects_Projects_Nodes_ProjectEmployees>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                projectEmployees.Add(MapNonNullableIGetProjects_Projects_Nodes_ProjectEmployees(child, snapshot));
            }

            return projectEmployees;
        }

        private global::TimeTracker.Api.Client.IGetProjects_Projects_Nodes_ProjectEmployees MapNonNullableIGetProjects_Projects_Nodes_ProjectEmployees(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("ProjectEmployee", global::System.StringComparison.Ordinal))
            {
                return _getProjects_Projects_Nodes_ProjectEmployees_ProjectEmployeeFromProjectEmployeeEntityMapper.Map(snapshot.GetEntity<global::TimeTracker.Api.Client.State.ProjectEmployeeEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::TimeTracker.Api.Client.IGetProjects_Projects_Nodes_ProjectEmployees_Employee MapNonNullableIGetProjects_Projects_Nodes_ProjectEmployees_Employee(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Employee", global::System.StringComparison.Ordinal))
            {
                return _getProjects_Projects_Nodes_ProjectEmployees_Employee_EmployeeFromEmployeeEntityMapper.Map(snapshot.GetEntity<global::TimeTracker.Api.Client.State.EmployeeEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public partial class GetProjectsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetProjectsResultInfo(global::TimeTracker.Api.Client.State.ProjectsConnectionData? projects, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Projects = projects;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::TimeTracker.Api.Client.State.ProjectsConnectionData? Projects { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetProjectsResultInfo(Projects, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public partial class GetProjects_Projects_Nodes_ProjectFromProjectEntityMapper : global::StrawberryShake.IEntityMapper<global::TimeTracker.Api.Client.State.ProjectEntity, GetProjects_Projects_Nodes_Project>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::TimeTracker.Api.Client.State.ProjectEmployeeEntity, GetProjects_Projects_Nodes_ProjectEmployees_ProjectEmployee> _getProjects_Projects_Nodes_ProjectEmployees_ProjectEmployeeFromProjectEmployeeEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::TimeTracker.Api.Client.State.EmployeeEntity, GetProjects_Projects_Nodes_ProjectEmployees_Employee_Employee> _getProjects_Projects_Nodes_ProjectEmployees_Employee_EmployeeFromEmployeeEntityMapper;
        public GetProjects_Projects_Nodes_ProjectFromProjectEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::TimeTracker.Api.Client.State.ProjectEmployeeEntity, GetProjects_Projects_Nodes_ProjectEmployees_ProjectEmployee> getProjects_Projects_Nodes_ProjectEmployees_ProjectEmployeeFromProjectEmployeeEntityMapper, global::StrawberryShake.IEntityMapper<global::TimeTracker.Api.Client.State.EmployeeEntity, GetProjects_Projects_Nodes_ProjectEmployees_Employee_Employee> getProjects_Projects_Nodes_ProjectEmployees_Employee_EmployeeFromEmployeeEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getProjects_Projects_Nodes_ProjectEmployees_ProjectEmployeeFromProjectEmployeeEntityMapper = getProjects_Projects_Nodes_ProjectEmployees_ProjectEmployeeFromProjectEmployeeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getProjects_Projects_Nodes_ProjectEmployees_ProjectEmployeeFromProjectEmployeeEntityMapper));
            _getProjects_Projects_Nodes_ProjectEmployees_Employee_EmployeeFromEmployeeEntityMapper = getProjects_Projects_Nodes_ProjectEmployees_Employee_EmployeeFromEmployeeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getProjects_Projects_Nodes_ProjectEmployees_Employee_EmployeeFromEmployeeEntityMapper));
        }

        public GetProjects_Projects_Nodes_Project Map(global::TimeTracker.Api.Client.State.ProjectEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetProjects_Projects_Nodes_Project(entity.Id, entity.Name, MapNonNullableIGetProjects_Projects_Nodes_ProjectEmployeesNonNullableArray(entity.ProjectEmployees, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::TimeTracker.Api.Client.IGetProjects_Projects_Nodes_ProjectEmployees> MapNonNullableIGetProjects_Projects_Nodes_ProjectEmployeesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var projectEmployees = new global::System.Collections.Generic.List<global::TimeTracker.Api.Client.IGetProjects_Projects_Nodes_ProjectEmployees>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                projectEmployees.Add(MapNonNullableIGetProjects_Projects_Nodes_ProjectEmployees(child, snapshot));
            }

            return projectEmployees;
        }

        private global::TimeTracker.Api.Client.IGetProjects_Projects_Nodes_ProjectEmployees MapNonNullableIGetProjects_Projects_Nodes_ProjectEmployees(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("ProjectEmployee", global::System.StringComparison.Ordinal))
            {
                return _getProjects_Projects_Nodes_ProjectEmployees_ProjectEmployeeFromProjectEmployeeEntityMapper.Map(snapshot.GetEntity<global::TimeTracker.Api.Client.State.ProjectEmployeeEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::TimeTracker.Api.Client.IGetProjects_Projects_Nodes_ProjectEmployees_Employee MapNonNullableIGetProjects_Projects_Nodes_ProjectEmployees_Employee(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Employee", global::System.StringComparison.Ordinal))
            {
                return _getProjects_Projects_Nodes_ProjectEmployees_Employee_EmployeeFromEmployeeEntityMapper.Map(snapshot.GetEntity<global::TimeTracker.Api.Client.State.EmployeeEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public partial class GetProjects_Projects_Nodes_ProjectEmployees_ProjectEmployeeFromProjectEmployeeEntityMapper : global::StrawberryShake.IEntityMapper<global::TimeTracker.Api.Client.State.ProjectEmployeeEntity, GetProjects_Projects_Nodes_ProjectEmployees_ProjectEmployee>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::TimeTracker.Api.Client.State.EmployeeEntity, GetProjects_Projects_Nodes_ProjectEmployees_Employee_Employee> _getProjects_Projects_Nodes_ProjectEmployees_Employee_EmployeeFromEmployeeEntityMapper;
        public GetProjects_Projects_Nodes_ProjectEmployees_ProjectEmployeeFromProjectEmployeeEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::TimeTracker.Api.Client.State.EmployeeEntity, GetProjects_Projects_Nodes_ProjectEmployees_Employee_Employee> getProjects_Projects_Nodes_ProjectEmployees_Employee_EmployeeFromEmployeeEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getProjects_Projects_Nodes_ProjectEmployees_Employee_EmployeeFromEmployeeEntityMapper = getProjects_Projects_Nodes_ProjectEmployees_Employee_EmployeeFromEmployeeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getProjects_Projects_Nodes_ProjectEmployees_Employee_EmployeeFromEmployeeEntityMapper));
        }

        public GetProjects_Projects_Nodes_ProjectEmployees_ProjectEmployee Map(global::TimeTracker.Api.Client.State.ProjectEmployeeEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetProjects_Projects_Nodes_ProjectEmployees_ProjectEmployee(MapNonNullableIGetProjects_Projects_Nodes_ProjectEmployees_Employee(entity.Employee, snapshot));
        }

        private global::TimeTracker.Api.Client.IGetProjects_Projects_Nodes_ProjectEmployees_Employee MapNonNullableIGetProjects_Projects_Nodes_ProjectEmployees_Employee(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Employee", global::System.StringComparison.Ordinal))
            {
                return _getProjects_Projects_Nodes_ProjectEmployees_Employee_EmployeeFromEmployeeEntityMapper.Map(snapshot.GetEntity<global::TimeTracker.Api.Client.State.EmployeeEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public partial class GetProjects_Projects_Nodes_ProjectEmployees_Employee_EmployeeFromEmployeeEntityMapper : global::StrawberryShake.IEntityMapper<global::TimeTracker.Api.Client.State.EmployeeEntity, GetProjects_Projects_Nodes_ProjectEmployees_Employee_Employee>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetProjects_Projects_Nodes_ProjectEmployees_Employee_EmployeeFromEmployeeEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetProjects_Projects_Nodes_ProjectEmployees_Employee_Employee Map(global::TimeTracker.Api.Client.State.EmployeeEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetProjects_Projects_Nodes_ProjectEmployees_Employee_Employee(entity.FirstName);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public partial class GetProjectsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::TimeTracker.Api.Client.IGetProjectsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::TimeTracker.Api.Client.IGetProjectsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetProjectsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::TimeTracker.Api.Client.IGetProjectsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetProjectsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetProjectsResult Result, GetProjectsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetProjectsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetProjectsResult, GetProjectsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::TimeTracker.Api.Client.State.ProjectsConnectionData? projectsId = default !;
            _entityStore.Update(session =>
            {
                projectsId = DeserializeIGetProjects_Projects(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "projects"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetProjectsResultInfo(projectsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::TimeTracker.Api.Client.State.ProjectsConnectionData? DeserializeIGetProjects_Projects(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ProjectsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::TimeTracker.Api.Client.State.ProjectsConnectionData(typename, nodes: UpdateIGetProjects_Projects_NodesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? UpdateIGetProjects_Projects_NodesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var projects = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                projects.Add(UpdateNonNullableIGetProjects_Projects_NodesEntity(session, child, entityIds));
            }

            return projects;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetProjects_Projects_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Project", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::TimeTracker.Api.Client.State.ProjectEntity? entity))
                {
                    session.SetEntity(entityId, new global::TimeTracker.Api.Client.State.ProjectEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), UpdateNonNullableIGetProjects_Projects_Nodes_ProjectEmployeesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "projectEmployees"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::TimeTracker.Api.Client.State.ProjectEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), UpdateNonNullableIGetProjects_Projects_Nodes_ProjectEmployeesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "projectEmployees"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetProjects_Projects_Nodes_ProjectEmployeesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var projectEmployees = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                projectEmployees.Add(UpdateNonNullableIGetProjects_Projects_Nodes_ProjectEmployeesEntity(session, child, entityIds));
            }

            return projectEmployees;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetProjects_Projects_Nodes_ProjectEmployeesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ProjectEmployee", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::TimeTracker.Api.Client.State.ProjectEmployeeEntity? entity))
                {
                    session.SetEntity(entityId, new global::TimeTracker.Api.Client.State.ProjectEmployeeEntity(UpdateNonNullableIGetProjects_Projects_Nodes_ProjectEmployees_EmployeeEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "employee"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::TimeTracker.Api.Client.State.ProjectEmployeeEntity(UpdateNonNullableIGetProjects_Projects_Nodes_ProjectEmployees_EmployeeEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "employee"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetProjects_Projects_Nodes_ProjectEmployees_EmployeeEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Employee", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::TimeTracker.Api.Client.State.EmployeeEntity? entity))
                {
                    session.SetEntity(entityId, new global::TimeTracker.Api.Client.State.EmployeeEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "firstName"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::TimeTracker.Api.Client.State.EmployeeEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "firstName"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public partial class ProjectsConnectionData
    {
        public ProjectsConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
        }

        public global::System.String __typename { get; }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Nodes { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public partial class TimeTrackerClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
            "Project" => ParseProjectEntityId(obj, __typename), "ProjectEmployee" => ParseProjectEmployeeEntityId(obj, __typename), "Employee" => ParseEmployeeEntityId(obj, __typename), _ => throw new global::System.NotSupportedException()}

            ;
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
            "Project" => FormatProjectEntityId(entityId), "ProjectEmployee" => FormatProjectEmployeeEntityId(entityId), "Employee" => FormatEmployeeEntityId(entityId), _ => throw new global::System.NotSupportedException()}

            ;
        }

        private global::StrawberryShake.EntityId ParseProjectEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatProjectEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseProjectEmployeeEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatProjectEmployeeEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseEmployeeEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatEmployeeEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.0.1.0")]
    public partial class TimeTrackerClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public TimeTrackerClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories): base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
